
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import ast.variables.*;
import ast.variables.expr.*;
import ast.variables.expr.terminals.*;
import ast.variables.expr.binary_operations.*;
import ast.variables.expr.unary_operations.*;
import ast.variables.stat.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\033\004\000\002\002\004\000\002\032" +
    "\004\000\002\032\002\000\002\031\003\000\002\031\004" +
    "\000\002\024\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\023\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\007\000\002\030" +
    "\016\000\002\030\015\000\002\030\015\000\002\030\014" +
    "\000\002\020\003\000\002\020\003\000\002\017\003\000" +
    "\002\017\005\000\002\005\004\000\002\005\002\000\002" +
    "\004\003\000\002\004\005\000\002\022\003\000\002\022" +
    "\005\000\002\021\004\000\002\006\003\000\002\006\005" +
    "\000\002\026\005\000\002\026\004\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\016\011\000\002\016" +
    "\010\000\002\015\002\000\002\015\004\000\002\014\006" +
    "\000\002\014\005\000\002\013\002\000\002\013\004\000" +
    "\002\013\003\000\002\012\010\000\002\012\007\000\002" +
    "\012\007\000\002\012\006\000\002\011\006\000\002\010" +
    "\006\000\002\007\005\000\002\003\006\000\002\003\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\004\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\014\012\013\013\007\014\012\015\011\016" +
    "\ufffe\001\002\000\004\002\243\001\002\000\004\016\102" +
    "\001\002\000\004\007\015\001\002\000\010\007\ufff7\011" +
    "\ufff7\021\ufff7\001\002\000\032\007\ufffe\012\013\013\007" +
    "\014\012\015\011\016\ufffe\022\ufffe\024\ufffe\031\ufffe\034" +
    "\ufffe\035\ufffe\060\ufffe\001\002\000\010\007\ufff9\011\ufff9" +
    "\021\ufff9\001\002\000\010\007\ufff8\011\ufff8\021\ufff8\001" +
    "\002\000\010\007\ufffa\011\ufffa\021\ufffa\001\002\000\022" +
    "\007\uffff\016\uffff\022\uffff\024\uffff\031\uffff\034\uffff\035" +
    "\uffff\060\uffff\001\002\000\010\010\ufff6\011\ufff6\036\077" +
    "\001\002\000\006\010\020\011\017\001\002\000\004\007" +
    "\021\001\002\000\032\007\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\022\ufffb\024\ufffb\031\ufffb\034\ufffb\035" +
    "\ufffb\060\ufffb\001\002\000\010\010\ufff5\011\ufff5\036\022" +
    "\001\002\000\024\004\025\005\023\006\031\007\034\040" +
    "\024\053\035\054\032\055\030\056\033\001\002\000\046" +
    "\010\uffc3\011\uffc3\020\uffc3\022\uffc3\025\uffc3\032\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\001\002\000" +
    "\024\004\025\005\023\006\031\007\034\040\024\053\035" +
    "\054\032\055\030\056\033\001\002\000\046\010\uffc4\011" +
    "\uffc4\020\uffc4\022\uffc4\025\uffc4\032\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\036\010\ufff3" +
    "\011\ufff3\037\042\040\037\041\047\042\045\043\043\044" +
    "\050\045\051\046\044\047\046\050\041\051\040\052\052" +
    "\001\002\000\046\010\uffc0\011\uffc0\020\uffc0\022\uffc0\025" +
    "\uffc0\032\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\001\002\000\046\010\uffc6\011\uffc6\020\uffc6\022\uffc6" +
    "\025\uffc6\032\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\001\002\000\046\010\uffc2\011\uffc2\020\uffc2\022" +
    "\uffc2\025\uffc2\032\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\001\002\000\046\010\uffc7\011\uffc7\020\uffc7" +
    "\022\uffc7\025\uffc7\032\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\001\002\000\046\010\uffc5\011\uffc5\020" +
    "\uffc5\022\uffc5\025\uffc5\032\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\001\002\000\050\010\uffc1\011\uffc1" +
    "\017\067\020\uffc1\022\uffc1\025\uffc1\032\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\001\002\000\024\004" +
    "\025\005\023\006\031\007\034\040\024\053\035\054\032" +
    "\055\030\056\033\001\002\000\046\010\uffb2\011\uffb2\020" +
    "\uffb2\022\uffb2\025\uffb2\032\uffb2\037\042\040\037\041\047" +
    "\042\045\043\043\044\050\045\051\046\044\047\046\050" +
    "\041\051\uffb2\052\uffb2\001\002\000\024\004\025\005\023" +
    "\006\031\007\034\040\024\053\035\054\032\055\030\056" +
    "\033\001\002\000\024\004\025\005\023\006\031\007\034" +
    "\040\024\053\035\054\032\055\030\056\033\001\002\000" +
    "\024\004\025\005\023\006\031\007\034\040\024\053\035" +
    "\054\032\055\030\056\033\001\002\000\024\004\025\005" +
    "\023\006\031\007\034\040\024\053\035\054\032\055\030" +
    "\056\033\001\002\000\024\004\025\005\023\006\031\007" +
    "\034\040\024\053\035\054\032\055\030\056\033\001\002" +
    "\000\024\004\025\005\023\006\031\007\034\040\024\053" +
    "\035\054\032\055\030\056\033\001\002\000\024\004\025" +
    "\005\023\006\031\007\034\040\024\053\035\054\032\055" +
    "\030\056\033\001\002\000\024\004\025\005\023\006\031" +
    "\007\034\040\024\053\035\054\032\055\030\056\033\001" +
    "\002\000\024\004\025\005\023\006\031\007\034\040\024" +
    "\053\035\054\032\055\030\056\033\001\002\000\024\004" +
    "\025\005\023\006\031\007\034\040\024\053\035\054\032" +
    "\055\030\056\033\001\002\000\024\004\025\005\023\006" +
    "\031\007\034\040\024\053\035\054\032\055\030\056\033" +
    "\001\002\000\024\004\025\005\023\006\031\007\034\040" +
    "\024\053\035\054\032\055\030\056\033\001\002\000\046" +
    "\010\uffba\011\uffba\020\uffba\022\uffba\025\uffba\032\uffba\037" +
    "\042\040\037\041\047\042\045\043\043\044\050\045\051" +
    "\046\044\047\046\050\041\051\040\052\uffba\001\002\000" +
    "\032\010\uffb7\011\uffb7\020\uffb7\022\uffb7\025\uffb7\032\uffb7" +
    "\037\042\040\037\041\047\042\045\051\uffb7\052\uffb7\001" +
    "\002\000\032\010\uffb4\011\uffb4\020\uffb4\022\uffb4\025\uffb4" +
    "\032\uffb4\037\042\040\037\041\047\042\045\051\uffb4\052" +
    "\uffb4\001\002\000\046\010\uffbd\011\uffbd\020\uffbd\022\uffbd" +
    "\025\uffbd\032\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\001\002\000\032\010\uffb9\011\uffb9\020\uffb9\022" +
    "\uffb9\025\uffb9\032\uffb9\037\042\040\037\041\047\042\045" +
    "\051\uffb9\052\uffb9\001\002\000\046\010\uffbc\011\uffbc\020" +
    "\uffbc\022\uffbc\025\uffbc\032\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\001\002\000\032\010\uffb6\011\uffb6" +
    "\020\uffb6\022\uffb6\025\uffb6\032\uffb6\037\042\040\037\041" +
    "\047\042\045\051\uffb6\052\uffb6\001\002\000\032\010\uffb5" +
    "\011\uffb5\020\uffb5\022\uffb5\025\uffb5\032\uffb5\037\042\040" +
    "\037\041\047\042\045\051\uffb5\052\uffb5\001\002\000\046" +
    "\010\uffbf\011\uffbf\020\uffbf\022\uffbf\025\uffbf\032\uffbf\037" +
    "\uffbf\040\uffbf\041\047\042\045\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\001\002\000" +
    "\032\010\uffb8\011\uffb8\020\uffb8\022\uffb8\025\uffb8\032\uffb8" +
    "\037\042\040\037\041\047\042\045\051\uffb8\052\uffb8\001" +
    "\002\000\046\010\uffbb\011\uffbb\020\uffbb\022\uffbb\025\uffbb" +
    "\032\uffbb\037\042\040\037\041\047\042\045\043\043\044" +
    "\050\045\051\046\044\047\046\050\041\051\uffbb\052\uffbb" +
    "\001\002\000\046\010\uffbe\011\uffbe\020\uffbe\022\uffbe\025" +
    "\uffbe\032\uffbe\037\uffbe\040\uffbe\041\047\042\045\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\001\002\000\026\004\025\005\023\006\031\007\034" +
    "\020\072\040\024\053\035\054\032\055\030\056\033\001" +
    "\002\000\042\010\uffe8\011\074\020\uffe8\022\uffe8\037\042" +
    "\040\037\041\047\042\045\043\043\044\050\045\051\046" +
    "\044\047\046\050\041\051\040\052\052\001\002\000\004" +
    "\020\073\001\002\000\046\010\uffc8\011\uffc8\020\uffc8\022" +
    "\uffc8\025\uffc8\032\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\001\002\000\046\010\uffc9\011\uffc9\020\uffc9" +
    "\022\uffc9\025\uffc9\032\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\001\002\000\024\004\025\005\023\006" +
    "\031\007\034\040\024\053\035\054\032\055\030\056\033" +
    "\001\002\000\010\010\uffe7\020\uffe7\022\uffe7\001\002\000" +
    "\046\010\uffb3\011\uffb3\020\uffb3\022\uffb3\025\uffb3\032\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\001\002" +
    "\000\024\004\025\005\023\006\031\007\034\040\024\053" +
    "\035\054\032\055\030\056\033\001\002\000\036\010\ufff4" +
    "\011\ufff4\037\042\040\037\041\047\042\045\043\043\044" +
    "\050\045\051\046\044\047\046\050\041\051\040\052\052" +
    "\001\002\000\004\002\001\001\002\000\004\007\105\001" +
    "\002\000\006\002\ufffd\016\102\001\002\000\004\002\ufffc" +
    "\001\002\000\004\017\106\001\002\000\014\012\013\013" +
    "\007\014\012\015\011\020\111\001\002\000\004\007\220" +
    "\001\002\000\006\010\225\020\226\001\002\000\014\012" +
    "\013\013\007\014\012\015\011\023\116\001\002\000\006" +
    "\010\uffe6\020\uffe6\001\002\000\006\011\223\021\uffec\001" +
    "\002\000\004\021\117\001\002\000\004\021\uffee\001\002" +
    "\000\004\021\uffed\001\002\000\030\007\ufffe\012\013\013" +
    "\007\014\012\015\011\022\ufffe\024\ufffe\031\ufffe\034\ufffe" +
    "\035\ufffe\060\ufffe\001\002\000\020\007\132\022\uffe9\024" +
    "\127\031\122\034\121\035\133\060\140\001\002\000\004" +
    "\017\217\001\002\000\034\004\025\005\023\006\031\007" +
    "\204\024\127\031\122\034\121\035\133\040\024\053\035" +
    "\054\032\055\030\056\033\001\002\000\004\010\uffde\001" +
    "\002\000\004\010\uffda\001\002\000\004\022\200\001\002" +
    "\000\004\010\uffdf\001\002\000\024\004\025\005\023\006" +
    "\031\007\034\040\024\053\035\054\032\055\030\056\033" +
    "\001\002\000\020\007\132\022\uffe9\024\127\031\122\034" +
    "\121\035\133\060\140\001\002\000\004\010\uffdb\001\002" +
    "\000\010\011\uffe3\017\067\036\uffe3\001\002\000\004\017" +
    "\147\001\002\000\004\010\uffdd\001\002\000\006\011\143" +
    "\036\144\001\002\000\004\010\uffdc\001\002\000\004\010" +
    "\142\001\002\000\024\004\025\005\023\006\031\007\034" +
    "\040\024\053\035\054\032\055\030\056\033\001\002\000" +
    "\004\022\uffea\001\002\000\050\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\022\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\060\uffe0\001\002\000\004\007\146\001" +
    "\002\000\024\004\025\005\023\006\031\007\034\040\024" +
    "\053\035\054\032\055\030\056\033\001\002\000\004\010" +
    "\uffca\001\002\000\012\010\uffe2\011\uffe2\020\uffe2\036\uffe2" +
    "\001\002\000\024\004\025\005\023\006\031\007\034\040" +
    "\024\053\035\054\032\055\030\056\033\001\002\000\004" +
    "\020\151\001\002\000\004\010\uffcb\001\002\000\004\022" +
    "\155\001\002\000\004\010\154\001\002\000\050\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\022\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\001\002\000" +
    "\004\010\156\001\002\000\006\002\ufff0\016\ufff0\001\002" +
    "\000\034\025\160\037\042\040\037\041\047\042\045\043" +
    "\043\044\050\045\051\046\044\047\046\050\041\051\040" +
    "\052\052\001\002\000\022\007\132\024\127\026\161\027" +
    "\uffd7\030\uffd7\031\122\034\121\035\133\001\002\000\024" +
    "\004\025\005\023\006\031\007\034\040\024\053\035\054" +
    "\032\055\030\056\033\001\002\000\010\026\161\027\uffd7" +
    "\030\uffd7\001\002\000\006\027\uffd3\030\166\001\002\000" +
    "\022\007\132\024\127\026\161\027\uffd7\030\uffd7\031\122" +
    "\034\121\035\133\001\002\000\006\027\uffd3\030\166\001" +
    "\002\000\016\007\132\024\127\027\uffd1\031\122\034\121" +
    "\035\133\001\002\000\004\027\170\001\002\000\004\010" +
    "\uffd9\001\002\000\016\007\132\024\127\027\uffd2\031\122" +
    "\034\121\035\133\001\002\000\004\027\173\001\002\000" +
    "\004\010\uffd8\001\002\000\006\027\uffd6\030\uffd6\001\002" +
    "\000\034\025\176\037\042\040\037\041\047\042\045\043" +
    "\043\044\050\045\051\046\044\047\046\050\041\051\040" +
    "\052\052\001\002\000\022\007\132\024\127\026\uffd4\027" +
    "\uffd4\030\uffd4\031\122\034\121\035\133\001\002\000\022" +
    "\007\132\024\127\026\uffd5\027\uffd5\030\uffd5\031\122\034" +
    "\121\035\133\001\002\000\004\010\201\001\002\000\006" +
    "\002\uffef\016\uffef\001\002\000\036\010\uffda\032\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\001\002\000" +
    "\034\032\213\037\042\040\037\041\047\042\045\043\043" +
    "\044\050\045\051\046\044\047\046\050\041\051\040\052" +
    "\052\001\002\000\042\011\uffe3\017\067\032\uffc1\036\uffe3" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\001\002" +
    "\000\034\004\025\005\023\006\031\007\204\024\127\031" +
    "\122\034\121\035\133\040\024\053\035\054\032\055\030" +
    "\056\033\001\002\000\034\032\207\037\042\040\037\041" +
    "\047\042\045\043\043\044\050\045\051\046\044\047\046" +
    "\050\041\051\040\052\052\001\002\000\016\007\132\024" +
    "\127\031\122\033\210\034\121\035\133\001\002\000\004" +
    "\010\uffce\001\002\000\016\007\132\024\127\031\122\033" +
    "\212\034\121\035\133\001\002\000\004\010\uffd0\001\002" +
    "\000\016\007\132\024\127\031\122\033\214\034\121\035" +
    "\133\001\002\000\004\010\uffcd\001\002\000\016\007\132" +
    "\024\127\031\122\033\216\034\121\035\133\001\002\000" +
    "\004\010\uffcf\001\002\000\004\007\220\001\002\000\010" +
    "\010\uffe3\011\uffe3\020\uffe3\001\002\000\006\011\143\020" +
    "\222\001\002\000\004\010\uffcc\001\002\000\012\012\013" +
    "\013\007\014\012\015\011\001\002\000\004\021\uffeb\001" +
    "\002\000\012\012\013\013\007\014\012\015\011\001\002" +
    "\000\014\012\013\013\007\014\012\015\011\023\116\001" +
    "\002\000\004\021\230\001\002\000\030\007\ufffe\012\013" +
    "\013\007\014\012\015\011\022\ufffe\024\ufffe\031\ufffe\034" +
    "\ufffe\035\ufffe\060\ufffe\001\002\000\020\007\132\022\uffe9" +
    "\024\127\031\122\034\121\035\133\060\140\001\002\000" +
    "\004\022\237\001\002\000\020\007\132\022\uffe9\024\127" +
    "\031\122\034\121\035\133\060\140\001\002\000\004\022" +
    "\235\001\002\000\004\010\236\001\002\000\006\002\ufff2" +
    "\016\ufff2\001\002\000\004\010\240\001\002\000\006\002" +
    "\ufff1\016\ufff1\001\002\000\006\010\uffe5\020\uffe5\001\002" +
    "\000\010\010\uffe4\011\143\020\uffe4\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\012\024\007\025\005\032\004\033\003\001" +
    "\001\000\002\001\001\000\006\030\102\031\100\001\001" +
    "\000\004\023\015\001\001\000\002\001\001\000\010\024" +
    "\007\025\005\032\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\025\003\026\001\001\000" +
    "\002\001\001\000\006\002\075\003\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\035\003\026\001\001\000" +
    "\002\001\001\000\006\002\065\003\026\001\001\000\006" +
    "\002\064\003\026\001\001\000\006\002\063\003\026\001" +
    "\001\000\006\002\062\003\026\001\001\000\006\002\061" +
    "\003\026\001\001\000\006\002\060\003\026\001\001\000" +
    "\006\002\057\003\026\001\001\000\006\002\056\003\026" +
    "\001\001\000\006\002\055\003\026\001\001\000\006\002" +
    "\054\003\026\001\001\000\006\002\053\003\026\001\001" +
    "\000\006\002\052\003\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\067\003\026\004\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\067\003\026\004\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\077" +
    "\003\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\102\031\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\111\022\107\025" +
    "\106\001\001\000\004\006\241\001\001\000\002\001\001" +
    "\000\010\017\114\020\113\025\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\007\025\005\032\117\001" +
    "\001\000\026\003\123\005\124\006\134\007\130\010\135" +
    "\011\133\012\122\016\125\026\127\027\136\001\001\000" +
    "\002\001\001\000\026\002\202\003\201\006\134\007\130" +
    "\010\135\011\133\012\122\016\125\026\204\027\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\156\003\026\001\001\000" +
    "\024\003\123\005\151\006\134\007\130\010\135\011\133" +
    "\012\122\016\125\027\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\067\003\026\004\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\067\003\026\004" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\067\003\026\004\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\123\006\134\007\130\010\135\011\133" +
    "\012\122\014\161\015\162\016\125\026\163\027\136\001" +
    "\001\000\006\002\174\003\026\001\001\000\006\014\161" +
    "\015\173\001\001\000\004\013\171\001\001\000\026\003" +
    "\123\006\134\007\130\010\135\011\133\012\122\014\161" +
    "\015\164\016\125\027\152\001\001\000\004\013\166\001" +
    "\001\000\024\003\123\006\134\007\130\010\135\011\133" +
    "\012\122\016\125\026\170\027\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\123\006\134\007\130" +
    "\010\135\011\133\012\122\016\125\027\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\123\006\134\007\130\010\135\011" +
    "\133\012\122\016\125\026\176\027\136\001\001\000\022" +
    "\003\123\006\134\007\130\010\135\011\133\012\122\016" +
    "\125\027\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\205\003\201\006\134\007\130\010\135\011\133" +
    "\012\122\016\125\027\152\001\001\000\002\001\001\000" +
    "\024\003\123\006\134\007\130\010\135\011\133\012\122" +
    "\016\125\026\210\027\136\001\001\000\002\001\001\000" +
    "\022\003\123\006\134\007\130\010\135\011\133\012\122" +
    "\016\125\027\152\001\001\000\002\001\001\000\024\003" +
    "\123\006\134\007\130\010\135\011\133\012\122\016\125" +
    "\026\214\027\136\001\001\000\002\001\001\000\022\003" +
    "\123\006\134\007\130\010\135\011\133\012\122\016\125" +
    "\027\152\001\001\000\002\001\001\000\004\006\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\223\025\112\001\001\000\002\001\001\000" +
    "\006\021\240\025\106\001\001\000\010\017\114\020\226" +
    "\025\112\001\001\000\002\001\001\000\010\024\007\025" +
    "\005\032\230\001\001\000\026\003\123\005\231\006\134" +
    "\007\130\010\135\011\133\012\122\016\125\026\232\027" +
    "\136\001\001\000\002\001\001\000\024\003\123\005\233" +
    "\006\134\007\130\010\135\011\133\012\122\016\125\027" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              Program RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDecl> varDeclList = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Proc> procList = (ArrayList<Proc>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(varDeclList, procList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDecl> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl varDecl = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDecl> varDeclList = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 varDeclList.add(0, varDecl);
                                                           RESULT = varDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		 RESULT = new ArrayList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= Proc 
            {
              ArrayList<Proc> RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Proc proc = (Proc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Proc>();
                                               RESULT.add(proc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc ProcList 
            {
              ArrayList<Proc> RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Proc proc = (Proc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int procListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Proc> procList = (ArrayList<Proc>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 procList.add(0, proc);
	                                           RESULT = procList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcList",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(type, idListInit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              String RESULT =null;
		 RESULT = ParserSym.terminalNames[ParserSym.INT]; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = ParserSym.terminalNames[ParserSym.BOOL]; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = ParserSym.terminalNames[ParserSym.FLOAT]; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              String RESULT =null;
		 RESULT = ParserSym.terminalNames[ParserSym.STRING]; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              IdListInit RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdListInit();
                                                                      RESULT.put(new Id(val), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInit RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idListInit.put(new Id(val), null);
           	                                                          RESULT = idListInit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInit RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdListInit();
	                                                                  RESULT.put(new Id(val), expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInit RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idListInit.put(new Id(val), expr);
	                                                                  RESULT = idListInit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<ParDecl> parDeclList = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<VarDecl> varDeclList = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int returnExprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int returnExprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AbstractExpression> returnExprs = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Proc(val, parDeclList, resultTypeList, varDeclList, statList, returnExprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<ParDecl> parDeclList = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VarDecl> varDeclList = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int returnExprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int returnExprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AbstractExpression> returnExprs = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Proc(val, parDeclList, resultTypeList, varDeclList, null, returnExprs, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<VarDecl> varDeclList = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int returnExprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int returnExprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AbstractExpression> returnExprs = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Proc(val, null, resultTypeList, varDeclList, statList, returnExprs, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VarDecl> varDeclList = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int returnExprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int returnExprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AbstractExpression> returnExprs = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Proc(val, resultTypeList, varDeclList, returnExprs);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Proc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeList ::= ResultConcreteTypesList 
            {
              ArrayList<String> RESULT =null;
		int resultConcreteTypesListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultConcreteTypesListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> resultConcreteTypesList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = resultConcreteTypesList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeList ::= VOID 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>();
                                                                      RESULT.add(ParserSym.terminalNames[ParserSym.VOID]); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ResultConcreteTypesList ::= Type 
            {
              ArrayList<String> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>();
                                         RESULT.add(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultConcreteTypesList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ResultConcreteTypesList ::= Type COMMA ResultConcreteTypesList 
            {
              ArrayList<String> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int resultConcreteTypesListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultConcreteTypesListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<String> resultConcreteTypesList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 resultConcreteTypesList.add(0, type);
                                                                                               RESULT = resultConcreteTypesList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ResultConcreteTypesList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ReturnExprs ::= RETURN ExprList 
            {
              ArrayList<AbstractExpression> RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<AbstractExpression> exprList = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ReturnExprs ::= 
            {
              ArrayList<AbstractExpression> RESULT =null;
		 RESULT = new ArrayList<AbstractExpression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ExprList ::= Expr 
            {
              ArrayList<AbstractExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<AbstractExpression>();
                                                RESULT.add(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<AbstractExpression> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<AbstractExpression> exprList = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 exprList.add(0, e1);
	                                            RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl parDecl = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDecl>();
                                                                    RESULT.add(parDecl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDecl> parDeclList = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl parDecl = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parDeclList.add(parDecl);
                                                                    RESULT = parDeclList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= Type IdList 
            {
              ParDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDecl(type, idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IdList ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Id>();
                                         RESULT.add(new Id(val)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Id> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idList.add(new Id(val));
	                                     RESULT = idList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= StatList Stat SEMI 
            {
              ArrayList<Statement> RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 statList.add(statement);
                                                      RESULT = statList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= Stat SEMI 
            {
              ArrayList<Statement> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayList<Statement>();
                                                      RESULT.add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat 
            {
              Statement RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If ifStat = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat 
            {
              Statement RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStat whileStat = (WhileStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadlnStat 
            {
              Statement RESULT =null;
		int readlnStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int readlnStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ReadlnStat readlnStat = (ReadlnStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = readlnStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat 
            {
              Statement RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WriteStat writeStat = (WriteStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = writeStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat 
            {
              Statement RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignStat assignStat = (AssignStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assignStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallProc 
            {
              Statement RESULT =null;
		int callProcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callProcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallProc callProc = (CallProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = callProc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              If RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Elif> elifList = (ArrayList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int anElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int anElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Else anElse = (Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(expr, statList, elifList, anElse); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStat ::= IF Expr THEN ElifList Else FI 
            {
              If RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Elif> elifList = (ArrayList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int anElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int anElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Else anElse = (Else)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(expr, elifList, anElse); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElifList ::= 
            {
              ArrayList<Elif> RESULT =null;
		 RESULT = new ArrayList<Elif>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElifList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ElifList ::= Elif ElifList 
            {
              ArrayList<Elif> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Elif elif = (Elif)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Elif> elifList = (ArrayList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elifList.add(0, elif);
	                                        RESULT = elifList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElifList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Elif ::= ELIF Expr THEN StatList 
            {
              Elif RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Elif(expr, statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Elif ::= ELIF Expr THEN 
            {
              Elif RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Elif(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Else ::= 
            {
              Else RESULT =null;
		 RESULT = new Else(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Else ::= ELSE StatList 
            {
              Else RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Else(statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Else ::= ELSE 
            {
              Else RESULT =null;
		 RESULT = new Else(new ArrayList<Statement>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WhileStat ::= WHILE StatList Expr DO StatList OD 
            {
              WhileStat RESULT =null;
		int condStatsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condStatsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Statement> condStats = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyStatsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyStatsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> bodyStats = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileStat(condStats, expr, bodyStats); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyStatsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyStatsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Statement> bodyStats = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileStat(expr, bodyStats, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WhileStat ::= WHILE StatList Expr DO OD 
            {
              WhileStat RESULT =null;
		int condStatsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condStatsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> condStats = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WhileStat(expr, condStats, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhileStat ::= WHILE Expr DO OD 
            {
              WhileStat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression expr = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WhileStat(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadlnStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadlnStat(idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteStat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<AbstractExpression> exprList = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteStat(exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<AbstractExpression> exprList = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStat(idList, exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProc RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<AbstractExpression> exprList = (ArrayList<AbstractExpression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallProc(val, exprList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallProc",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CallProc ::= ID LPAR RPAR 
            {
              CallProc RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallProc(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallProc",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= NULL 
            {
              AbstractExpression RESULT =null;
		 RESULT = new Null(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= TRUE 
            {
              AbstractExpression RESULT =null;
		 RESULT = new True(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= FALSE 
            {
              AbstractExpression RESULT =null;
		 RESULT = new False(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= INT_CONST 
            {
              AbstractExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntConst(Integer.parseInt(val)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= FLOAT_CONST 
            {
              AbstractExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatConst(Float.parseFloat(val)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= STRING_CONST 
            {
              AbstractExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= ID 
            {
              AbstractExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= CallProc 
            {
              AbstractExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallProc val = (CallProc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr PLUS Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr MINUS Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr TIMES Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TimesExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr DIV Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr AND Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr OR Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr GT Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GtExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr GE Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GeExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr LT Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LtExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr LE Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LeExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr EQ Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr NE Expr 
            {
              AbstractExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AbstractExpression e1 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e2 = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NeExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= MINUS Expr 
            {
              AbstractExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UminExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= NOT Expr 
            {
              AbstractExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AbstractExpression e = (AbstractExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
