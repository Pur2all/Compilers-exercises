import ast.variables.*;
import ast.variables.expr.terminals.*;
import ast.variables.expr.binary_operations.*;
import ast.variables.expr.unary_operations.*;
// Parser class name
class Parser;
// Terminals
terminal String INT_CONST, FLOAT_CONST;
terminal String STRING_CONST, ID;

terminal SEMI, COMMA, INT, STRING, FLOAT, BOOL, PROC, LPAR, RPAR, COLON, CORP, VOID, IF,
         THEN, ELIF, FI, ELSE, WHILE, DO, OD, READ, WRITE, ASSIGN, PLUS, MINUS, TIMES, DIV,
         EQ, NE, LT, LE, GT, GE, AND, OR, NOT, NULL, TRUE, FALSE, UMINUS, RETURN;

// Non terminals
nonterminal Expression Expr;
nonterminal CallProc CallProc;
nonterminal Program, VarDeclList, ProcList, VarDecl, Type, IdListInit, Proc, ResultTypeList, ReturnExprs,
            ExprList, ParamDeclList, ParDecl, ResultType, StatList, Stat, IfStat, ElifList, Elif,
            Else, WhileStat, ReadlnStat, WriteStat, AssignStat, IdList;

// Precedences
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;

// Productions
Program ::= VarDeclList ProcList {:System.out.println("Program -> VarDeclList ProcList");:};

VarDeclList ::= VarDecl VarDeclList {:System.out.println("VarDeclList -> VarDecl VarDeclList");:}
              | /* empty */{:System.out.println("VarDeclList -> ''");:};

ProcList ::= Proc {:System.out.println("ProcList -> Proc");:}
	       | Proc ProcList {:System.out.println("ProcList -> Proc ProcList");:};

VarDecl ::= Type IdListInit SEMI {:System.out.println("VarDecl -> Type IdListInit");:};

Type ::= INT {:System.out.println("Type -> INT");:}
       | BOOL {:System.out.println("Type -> BOOL");:}
       | FLOAT {:System.out.println("Type -> FLOAT");:}
       | STRING {:System.out.println("Type -> STRING");:};

IdListInit ::= ID {:System.out.println("IdListInit -> ID");:}
           	 | IdListInit COMMA ID {:System.out.println("IdListInit -> IdListInit COMMA ID");:}
	         | ID ASSIGN Expr {:System.out.println("IdListInit -> ID ASSIGN Expr");:}
	         | IdListInit COMMA ID ASSIGN Expr {:System.out.println("IdListInit -> IdListInit COMMA ID ASSSIGN Expr");:};

Proc ::= PROC ID LPAR ParamDeclList RPAR ResultType COLON VarDeclList StatList ReturnExprs CORP SEMI {:System.out.println("Proc -> PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList ReturnExprs CORP SEMI");:}
       | PROC ID LPAR ParamDeclList RPAR ResultType COLON VarDeclList ReturnExprs CORP SEMI
       | PROC ID LPAR RPAR ResultType COLON VarDeclList StatList ReturnExprs CORP SEMI {:System.out.println("Proc -> PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList ReturnExprs CORP SEMI");:}
       | PROC ID LPAR RPAR ResultType COLON VarDeclList ReturnExprs CORP SEMI;

ResultType ::= ResultTypeList {:System.out.println("ResultTypeList -> ResultType");:}
	         | VOID {:System.out.println("ResultType -> void");:};

ReturnExprs::=  RETURN ExprList {:System.out.println("ReturnExprs -> ExprList");:}
	          | /* empty */ {:System.out.println("ReturnExprs -> ''");:};

ExprList ::= Expr:e1 {: System.out.println(e1);:}
	       | Expr COMMA ExprList {:System.out.println("ExprList -> Expr COMMA ExprList");:};

ParamDeclList ::= ParDecl {:System.out.println("ParmaDecList -> ParDecl");:}
                | ParamDeclList SEMI ParDecl {:System.out.println("ParamDeclList -> ParamDeclList SEMI ParDecl");:};

ParDecl ::= Type ExprList {:System.out.println("ParDecl -> Type ExprList");:};

IdList ::= ID {:System.out.println("IdList ->  ID");:}
         | IdList COMMA ID {:System.out.println("IdList -> IdList COMMA ID");:};

ResultTypeList ::= Type
                 | Type COMMA ResultTypeList {:System.out.println("ResultTypeList -> ResultType COMMA ResultTypeList");:};

StatList ::= StatList Stat SEMI
           | Stat SEMI{:System.out.println("StatList -> Stat");:};

Stat ::= IfStat  {:System.out.println("Stat -> IfStat SEMI");:}
	   | WhileStat   {:System.out.println("Stat -> WhileStat SEMI");:}
	   | ReadlnStat {:System.out.println("Stat -> ReadlnStat SEMI");:}
	   | WriteStat  {:System.out.println("Stat -> WriteStat SEMI");:}
	   | AssignStat  {:System.out.println("Stat -> AssignStat SEMI");:}
	   | CallProc  {:System.out.println("Stat -> CallProc SEMI");:};

IfStat ::= IF Expr THEN StatList ElifList Else FI {:System.out.println("IfStat -> IF Expr THEN StatList ElifList Else FI");:}
          |IF Expr THEN ElifList Else FI;

ElifList ::= /* empty */ {:System.out.println("ElisfList -> ''");:}
	       | Elif ElifList {:System.out.println("ElifList -> Elif ElifList");:};

Elif ::= ELIF Expr THEN StatList {:System.out.println("Elif -> ELIF Expr THEN StatList");:}
       | ELIF Expr THEN ;

Else ::= /* empty */ {:System.out.println("Else ->''");:}
       | ELSE StatList {:System.out.println("Else -> ELSE StatList");:}
       | ELSE;

WhileStat ::= WHILE StatList Expr DO StatList OD {:System.out.println("WhileStat ->WHILE StatList Expr DO StatList OD");:}
	        | WHILE Expr DO StatList OD {:System.out.println("WhileStat ->  WHILE Expr DO StatList OD");:}
	        | WHILE StatList Expr DO OD
	        | WHILE Expr DO OD;

ReadlnStat ::= READ LPAR IdList RPAR {:System.out.println("ReadlnStat -> READ LPAR IList RPAR");:};

WriteStat ::=  WRITE LPAR ExprList RPAR {:System.out.println("WriteStat ->WRITE LPAR ExprList RPAR");:};

AssignStat ::= IdList ASSIGN ExprList {:System.out.println("AssignStat -> ExprList ASSIGN ExprList");:};

CallProc ::= ID LPAR ExprList RPAR {:System.out.println("CallProc -> ID LPAR ExprList RPAR");:}
	       | ID LPAR RPAR {:System.out.println("CallProc -> ID LPAR RPAR ");:};

Expr ::= NULL {: RESULT = new Null(); :}
	   | TRUE {: RESULT = new True(); :}
	   | FALSE {: RESULT = new False(); :}
	   | INT_CONST:val {: RESULT = new IntConst(Integer.parseInt(val)); :}
	   | FLOAT_CONST:val {: RESULT = new FloatConst(Float.parseFloat(val)); :}
       | STRING_CONST:val {: RESULT = new StringConst(val); :}
       | ID:val {: RESULT = new Id(val); :}
       | CallProc:val {: RESULT = val; :}
       | Expr:e1 PLUS Expr:e2 {: RESULT = new AddExpr(e1, e2); :}
       | Expr:e1 MINUS Expr:e2 {: RESULT = new MinExpr(e1, e2); :}
       | Expr:e1 TIMES Expr:e2 {: RESULT = new TimesExpr(e1, e2); :}
       | Expr:e1 DIV Expr:e2 {: RESULT = new DivExpr(e1, e2); :}
       | Expr:e1 AND Expr:e2 {: RESULT = new AndExpr(e1, e2); :}
       | Expr:e1 OR Expr:e2 {: RESULT = new OrExpr(e1, e2); :}
       | Expr:e1 GT Expr:e2 {: RESULT = new GtExpr(e1, e2); :}
       | Expr:e1 GE Expr:e2 {: RESULT = new GeExpr(e1, e2); :}
       | Expr:e1 LT Expr:e2 {: RESULT = new LtExpr(e1, e2); :}
       | Expr:e1 LE Expr:e2 {: RESULT = new LeExpr(e1, e2); :}
       | Expr:e1 EQ Expr:e2 {: RESULT = new EqExpr(e1, e2); :}
       | Expr:e1 NE Expr:e2 {: RESULT = new NeExpr(e1, e2); :}
       | MINUS Expr:e {: RESULT = new UminExpr(e); :}  %prec UMINUS
       | NOT Expr:e {: RESULT = new NotExpr(e); :};
